name: Healthcare Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pylint bandit safety
    
    - name: Run Black formatter check
      run: black --check src/ tests/
    
    - name: Run Flake8 linter
      run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run MyPy type checker
      run: mypy src/ --ignore-missing-imports
    
    - name: Run Pylint
      run: pylint src/ --fail-under=8.0
    
    - name: Run Bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json
    
    - name: Check for security vulnerabilities
      run: safety check --json --output safety-report.json

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_healthcare
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_healthcare
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        JWT_SECRET: test-jwt-secret
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build test image
      run: docker-compose -f docker-compose.test.yml build
    
    - name: Run integration tests
      run: docker-compose -f docker-compose.test.yml run --rm integration-tests
    
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Healthcare-Pipeline'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
    
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: owasp-report
        path: reports/

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.repository.updated_at }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging environment
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        echo "$STAGING_SSH_KEY" > deploy_key
        chmod 600 deploy_key
        ssh -i deploy_key -o StrictHostKeyChecking=no $STAGING_HOST << 'EOF'
          cd /opt/healthcare-pipeline
          docker-compose pull
          docker-compose up -d
          docker system prune -f
        EOF

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production environment
      env:
        PROD_HOST: ${{ secrets.PROD_HOST }}
        PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
      run: |
        echo "$PROD_SSH_KEY" > deploy_key
        chmod 600 deploy_key
        ssh -i deploy_key -o StrictHostKeyChecking=no $PROD_HOST << 'EOF'
          cd /opt/healthcare-pipeline
          docker-compose pull
          docker-compose up -d --scale etl_pipeline=3
          docker system prune -f
        EOF
    
    - name: Run post-deployment health checks
      run: |
        sleep 30
        curl -f https://api.healthcare-pipeline.com/health || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed successfully!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()

  # Documentation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
    
    - name: Generate API documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html