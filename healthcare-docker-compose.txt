version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthcare_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-healthcare_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_DB: ${DB_NAME:-healthcare_research}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-healthcare_admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthcare_network

  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: healthcare_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthcare_network

  # ETL Pipeline Service
  etl_pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthcare_etl
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-healthcare_admin}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-healthcare_research}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
    command: python src/main.py --run-pipeline
    networks:
      - healthcare_network
    restart: unless-stopped

  # Analytics Dashboard
  analytics_dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthcare_analytics
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-healthcare_admin}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-healthcare_research}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    command: python src/analytics/dashboard.py
    networks:
      - healthcare_network
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthcare_api
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-healthcare_admin}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-healthcare_research}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - API_HOST=0.0.0.0
      - API_PORT=8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8001 --reload
    networks:
      - healthcare_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: healthcare_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - analytics_dashboard
      - api
    networks:
      - healthcare_network
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healthcare_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@healthcare.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_secure_123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - healthcare_network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - healthcare_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: healthcare_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_secure_123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healthcare_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthcare_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16